// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // 参考的答案
    DMux8Way(in=load, sel=address[3..5], a=load0, b=load1, c=load2, d=load3, e=load4, f=load5, g=load6, h=load7);
    RAM8(in=in, load=load0, address=address[0..2], out=out0);
    RAM8(in=in, load=load1, address=address[0..2], out=out1);
    RAM8(in=in, load=load2, address=address[0..2], out=out2);
    RAM8(in=in, load=load3, address=address[0..2], out=out3);
    RAM8(in=in, load=load4, address=address[0..2], out=out4);
    RAM8(in=in, load=load5, address=address[0..2], out=out5);
    RAM8(in=in, load=load6, address=address[0..2], out=out6);
    RAM8(in=in, load=load7, address=address[0..2], out=out7);
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[3..5], out=out);

    // RAM16 的实现思路: RAM16 比 RAM8, 多了一位地址, 就是该地址位将存储器的数量扩大了一倍, 所以应该由最高位分解出两个值(反向多路复用器)
    // 再以 DMux 的两个输出, 分别搭配其他地址位 address[0..2] 经过 RAM8 处理后得到另外的两个输出, 最后再由 address[3], 即地址位的最高位选择输出最终的输出值
    // DMux(in=load, sel=address[3], a=load0, b=load1);
    // RAM8(in=in, load=load0, address=address[0..2], out=out0);
    // RAM8(in=in, load=load1, address=address[0..2], out=out1);
    // Mux16(a=out0, b=out1, sel=address[3], out=out);
}
